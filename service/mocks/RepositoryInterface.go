// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	context "context"
	api "user/service/api"

	mock "github.com/stretchr/testify/mock"

	model "user/service/model"
)

// RepositoryInterface is an autogenerated mock type for the RepositoryInterface type
type RepositoryInterface struct {
	mock.Mock
}

// CreateUser provides a mock function with given fields: ctx, request
func (_m *RepositoryInterface) CreateUser(ctx context.Context, request *api.CreateUserRequest) (*model.User, error) {
	ret := _m.Called(ctx, request)

	var r0 *model.User
	if rf, ok := ret.Get(0).(func(context.Context, *api.CreateUserRequest) *model.User); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *api.CreateUserRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteUser provides a mock function with given fields: ctx, request
func (_m *RepositoryInterface) DeleteUser(ctx context.Context, request *api.DeleteUserRequest) error {
	ret := _m.Called(ctx, request)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *api.DeleteUserRequest) error); ok {
		r0 = rf(ctx, request)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetUsersPaginated provides a mock function with given fields: ctx, request
func (_m *RepositoryInterface) GetUsersPaginated(ctx context.Context, request *api.GetUsersRequest) ([]model.User, error) {
	ret := _m.Called(ctx, request)

	var r0 []model.User
	if rf, ok := ret.Get(0).(func(context.Context, *api.GetUsersRequest) []model.User); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *api.GetUsersRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateUser provides a mock function with given fields: ctx, request
func (_m *RepositoryInterface) UpdateUser(ctx context.Context, request *api.UpdateUserRequest) (*model.User, error) {
	ret := _m.Called(ctx, request)

	var r0 *model.User
	if rf, ok := ret.Get(0).(func(context.Context, *api.UpdateUserRequest) *model.User); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *api.UpdateUserRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewRepositoryInterface interface {
	mock.TestingT
	Cleanup(func())
}

// NewRepositoryInterface creates a new instance of RepositoryInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewRepositoryInterface(t mockConstructorTestingTNewRepositoryInterface) *RepositoryInterface {
	mock := &RepositoryInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
